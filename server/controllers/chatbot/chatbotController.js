const model_gemini = require('../../config/genmini');
const { getCurrentWeather, searchProduct } = require('./functioncalling/utilities');

// ƒê·ªãnh nghƒ©a h√†m mapping ƒë·ªÉ g·ªçi c√°c h√†m th·ª±c t·∫ø
const availableFunctions = {
    get_current_temperature: getCurrentWeather,
    search_product: searchProduct
};

// ƒê·ªãnh nghƒ©a c√°c c√¥ng c·ª• (tools) cho Gemini
const tools = [{
    function_declarations: [{
        name: 'get_current_temperature',
        description: 'Gets the current temperature for a given location.',
        parameters: {
            type: 'object',
            properties: {
                location: {
                    type: 'string',
                    description: 'The city name, e.g. San Francisco',
                },
                // N·∫øu h√†m getCurrentWeather c·ªßa b·∫°n c√≥ tham s·ªë 'unit', h√£y th√™m v√†o ƒë√¢y
                // unit: {
                //     type: 'string',
                //     enum: ["celsius", "fahrenheit"],
                //     description: "ƒê∆°n v·ªã nhi·ªát ƒë·ªô (m·∫∑c ƒë·ªãnh l√† celsius).",
                // },
            },
            required: ['location'],
        },
    },
    {
        name: 'search_product',
        description: 'T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a m√¥ t·∫£ do ng∆∞·ªùi d√πng cung c·∫•p.',
        parameters: {
            type: 'object',
            properties: {
                query: {
                    type: 'string',
                    description: 'T·ª´ kh√≥a ho·∫∑c m√¥ t·∫£ s·∫£n ph·∫©m c·∫ßn t√¨m, v√≠ d·ª•: "Laptop m·ªèng nh·∫π m√†u x√°m".'
                }
            },
            required: ['query']
        }
    }
    ],
}];

exports.getResponse = async (req, res) => {
    const { message, fullHistory } = req.body;

    if (!message) {
        return res.status(400).json({ error: 'Message is required.' });
    }

    let conversationHistoryForGemini = [];

    // Th√™m prompt ban ƒë·∫ßu ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng bot
    conversationHistoryForGemini.push({
        role: "user",
        parts: [
            {
                text: `
                    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, lu√¥n n√≥i ti·∫øng Vi·ªát.
                    B·∫°n c√≥ quy·ªÅn truy c·∫≠p v√†o c√°c c√¥ng c·ª• sau:
                        1. 'get_current_temperature' ‚Äì d√πng ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i t·∫°i m·ªôt v·ªã tr√≠ c·ª• th·ªÉ.
                        2. 'search_product' ‚Äì d√πng ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n m√¥ t·∫£ ho·∫∑c t·ª´ kh√≥a ng∆∞·ªùi d√πng ƒë∆∞a ra.
                    üîπ N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ th·ªùi ti·∫øt ·ªü ƒë√¢u ƒë√≥, b·∫°n ** PH·∫¢I d√πng ** c√¥ng c·ª• 'get_current_temperature'.
                    üîπ N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m, m√¥ t·∫£ s·∫£n ph·∫©m, ho·∫∑c mu·ªën g·ª£i √Ω s·∫£n ph·∫©m, b·∫°n ** PH·∫¢I d√πng ** c√¥ng c·ª• 'search_product'.
                     üí¨ V√≠ d·ª•:
                     - Ng∆∞·ªùi d√πng: Th·ªùi ti·∫øt H√† N·ªôi h√¥m nay nh∆∞ th·∫ø n√†o ?
                    ‚Üí D√πng: get_current_temperature(location = "H√† N·ªôi")
                        - Ng∆∞·ªùi d√πng: C√≥ laptop n√†o m·ªèng nh·∫π m√†u x√°m d∆∞·ªõi 20 tri·ªáu kh√¥ng ?
                    ‚Üí D√πng: search_product(query = "laptop m·ªèng nh·∫π m√†u x√°m d∆∞·ªõi 20 tri·ªáu")
                    ‚ö†Ô∏è Kh√¥ng t·ª± ƒëo√°n hay tr·∫£ l·ªùi thay cho c√¥ng c·ª•.N·∫øu c√¢u h·ªèi thu·ªôc ph·∫°m vi c√¥ng c·ª•, ** ph·∫£i g·ªçi c√¥ng c·ª• ** ƒë·ªÉ l·∫•y d·ªØ li·ªáu tr∆∞·ªõc khi ph·∫£n h·ªìi.
                    H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, tr·ª±c ti·∫øp.
                    `,
            },
        ],
    });

    // Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ frontend v√†o
    if (fullHistory && Array.isArray(fullHistory)) {
        fullHistory.forEach(msg => {
            const role = msg.role === 'user' ? 'user' : 'model';
            conversationHistoryForGemini.push({
                role: role,
                parts: [{ text: msg.text }]
            });
        });
    }

    try {
        // B·∫Øt ƒë·∫ßu m·ªôt phi√™n chat m·ªõi v·ªõi l·ªãch s·ª≠ ƒë·∫ßy ƒë·ªß v√† c√°c c√¥ng c·ª•
        // R·∫§T QUAN TR·ªåNG: Truy·ªÅn `tools` TR·ª∞C TI·∫æP v√†o `startChat`
        const chat = model_gemini.startChat({
            history: conversationHistoryForGemini,
            tools: tools,
        });

        // G·ª≠i tin nh·∫Øn m·ªõi nh·∫•t c·ªßa ng∆∞·ªùi d√πng
        const result = await chat.sendMessage(message); // Truy·ªÅn message string tr·ª±c ti·∫øp
        const response = result.response;

        if (response.text()) {
            // Gemini tr·∫£ l·ªùi b·∫±ng vƒÉn b·∫£n
            return res.json({ role: "bot", text: response.text() });
        } else if (response.functionCalls() && response.functionCalls().length > 0) {
            // Gemini mu·ªën g·ªçi m·ªôt h√†m
            const functionCall = response.functionCalls()[0]; // L·∫•y l·ªùi g·ªçi h√†m ƒë·∫ßu ti√™n

            if (functionCall && availableFunctions[functionCall.name]) {
                const functionToCall = availableFunctions[functionCall.name];
                console.log(functionToCall)
                const functionArgs = functionCall.args;

                console.log(`Gemini mu·ªën g·ªçi h√†m: ${functionCall.name} v·ªõi ƒë·ªëi s·ªë: `, functionArgs);

                // Th·ª±c thi h√†m v√† l·∫•y k·∫øt qu·∫£
                // ƒê·∫£m b·∫£o getCurrentWeather l√† async n·∫øu n√≥ th·ª±c hi·ªán c√°c ho·∫°t ƒë·ªông b·∫•t ƒë·ªìng b·ªô
                const callResult = await functionToCall(functionArgs.location, functionArgs.unit);

                // G·ª≠i k·∫øt qu·∫£ c·ªßa h√†m tr·ªü l·∫°i Gemini
                // R·∫§T QUAN TR·ªåNG: G·ª≠i k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt Content object
                const toolResponseResult = await chat.sendMessage([
                    {
                        functionResponse: {
                            name: functionCall.name,
                            response: callResult,
                        },
                    },
                ]);
                const finalResponseText = toolResponseResult.response.text();
                return res.json({ role: "bot", text: finalResponseText });

            } else {
                return res.status(500).json({ error: "Gemini y√™u c·∫ßu m·ªôt h√†m kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a." });
            }
        } else {
            // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ text v√† kh√¥ng c√≥ functionCalls (v√≠ d·ª•: blocked content)
            console.warn("Gemini did not return text or a function call.");
            return res.status(500).json({ error: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y." });
        }

    } catch (error) {
        console.error("L·ªói g·ª≠i tin nh·∫Øn ƒë·∫øn Gemini:", error);
        // Ki·ªÉm tra xem l·ªói c√≥ ph·∫£i do blockReasons kh√¥ng ƒë·ªÉ ƒë∆∞a ra ph·∫£n h·ªìi th√¢n thi·ªán h∆°n
        if (error.response && error.response.promptFeedback && error.response.promptFeedback.blockReasons) {
            return res.status(400).json({ error: "Xin l·ªói, c√¢u h·ªèi c·ªßa b·∫°n c√≥ v·∫ª kh√¥ng ph√π h·ª£p v·ªõi ch√≠nh s√°ch c·ªßa t√¥i." });
        }
        res.status(500).json({ error: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n." });
    }
};